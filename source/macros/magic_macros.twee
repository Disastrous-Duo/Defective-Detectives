:: Foresight [Widget widget]
<<nobr>>
<<widget "Foresight">>
<<set _scene_text to ("@@.foresight;"+$args[2]+"@@")>>
<<AddParagraph _scene_text >>
<<PlaySound "light_flicker">>
<<set _countdown to ("@@.foresight;Time before impact: "+$args[0]+"@@")>>
<<set _countdown to _countdown+("@@.Tickdown.foresight;@@")>>
<<set _countdown to _countdown+("@@.foresight;"+$args[1]+"@@")>>
<<BlankSpeaker>>
<<AddParagraph _countdown >>
<<PlaySound "tickdown">>
<</widget>>
<</nobr>>

:: Tickdown [Widget widget]
<<nobr>>
<<widget "Tickdown">>
<<set _scene_text to ('@@.Tickdown;@@')>>
<<AddParagraph _scene_text>>
<<PlaySound "tickdown">>
<</widget>>
<</nobr>>

:: AddScore [Widget widget]
<<widget "AddScore">>
<<set _name to $args[0]>>
<<set _score to $args[1]>>
<<run $scoreboard[_name] += _score>>
<<run window.flipNumber($("#scoreboard-"+$args[0]), $scoreboard[_name]) >>
<</widget>>


:: Precog [Widget widget]
<<nobr>>
<<widget "Precog">>
<<set _scene_text to ("@@.precog_color;<span class='Precog' data data-value='"+$args[0]+"'></span>@@")>>
<<AddParagraph _scene_text >>
<</widget>>
<</nobr>>

:: PrecogRandom [Widget widget]
<<nobr>>
<<widget "PrecogRandom">>
<<set _scene_text to ("@@.precog_color;<span class='PrecogRandom' data-value='"+$args[0]+"'></span>@@")>>
<<AddParagraph _scene_text >>
<</widget>>
<</nobr>>

:: WordInput [Widget widget]
<<nobr>>
<<widget "WordInput">>

<<set _length to parseInt($args[0])>>
<<set window.word_input_length to _length>>
<<set window.word_input_variable_name to $args[1]>>
<<set window.word_input_scene_name to $args[2]>>

<br/>
<table>
  <tbody>

      <tr>
        <<for $_i to 0; $_i < _length; $_i++>>
        <<capture $_i>>
          <th @onclick="'word_input_up_click('+$_i+')'" @id="'word_input_up_'+$_i" class="word_input_arrow word_input_up">▴</th>
        <</capture>>
        <</for>>
      </tr>

      <tr>
        <<for $_i to 0; $_i < _length; $_i++>>
          <th @id="'word_input_case_'+$_i" class="word_input_case">

          <canvas @id="'word_input_letter_'+$_i" width="96" height ="96" class="word_input_letter">
          </canvas>
          </th>
        <</for>>
      </tr>

      <tr>
        <<for $_i to 0; $_i < _length; $_i++>>
        <<capture $_i>>
          <th @onclick="'word_input_down_click('+$_i+')'" @id="'word_input_down_'+$_i" class="word_input_arrow word_input_down">▾</th>
        <</capture>>
        <</for>>
      </tr>


      <tr>
      <<for $_i to 0; $_i < _length; $_i++>>
        <th>
          <<if $_i == Math.floor((_length-1)/2)>>
            <br/>
            <input type="button" onclick="window.updateWordValue(true);" value="Confirm" id="word_input_button" class="word_input_button word_input_button_disabled" />
          <</if>>
        </th>
      <</for>>

      </tr>

      </tbody>
</table>



<<script>>



  var letters_length = word_input_length;
  var alphabet = "-ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");

  var range = [...Array(word_input_length).keys()];

  /* Randomize initial positions for casino effect */
  var actual_slot_y = range.map(i => Math.floor(Math.random()*alphabet.length*i));
  var target_slot_y = new Array(letters_length).fill(0);

  var fontSize = 96;
  var letterColor = "white";
  var darkerColor = "#666666";

  var updateInterval = 1000/30;
  var decimal_precision = 3;

  var firstClick = true;
  var current_value = "";

  Number.prototype.mod = function (n) {return ((this % n) + n) % n;};

  function getCvs(id)
  {
    return document.getElementById("word_input_letter_"+id);
  }

  function getCtx(id)
  {
    return getCvs(id).getContext("2d");
  }


  function drawSlot(id)
  {
    var ctx = getCtx(id), cvs = getCvs(id);

    ctx.font = fontSize+"px  David Libre";
    ctx.textBaseline = 'middle';
    ctx.textAlign = 'center';

    ctx.clearRect(0,0,cvs.width, cvs.height);

    var target = target_slot_y[id];
    var actual = actual_slot_y[id];

    for(var i = 0; i < alphabet.length; i++)
    {
      var letter = alphabet[i];
      var delta;

      /* No idea why I had to incldue those special cases, but now it works??? */
      if(i == 0 &&  target.mod(alphabet.length) == 0)
      {
        delta = actual-target;
      }
      else if(i == 0 && target.mod(alphabet.length) == alphabet.length-1)
      {
        delta = actual-target-1;
      }
      else
      {
        delta = (actual).mod(alphabet.length);
      }

      var screen_y = (i-delta)*fontSize;
      ctx.fillStyle = i == 0 ? darkerColor : letterColor;
      ctx.fillText(letter, 0+cvs.width/2, screen_y+cvs.height/2);
    }

  }


  function word_input_step()
  {

    if(!getCvs(0)) /*Detect when we leave the word input scene*/
    {
      return false;
    }

    for(var id = 0; id < letters_length; id++)
    {

      var actual = actual_slot_y[id];
      var target = target_slot_y[id];

      actual += (target-actual)/3;
      actual_slot_y[id] = actual.toFixed(decimal_precision)*1;
      drawSlot(id);
    }

    window.word_input_timer = setTimeout(word_input_step, updateInterval);
  };


  window.updateWordValue = function(asking_for_validation)
  {
    /*Put spaces, trim*/
    current_value = target_slot_y.map(i => alphabet[i.mod(alphabet.length)]).join("").replace(/-/g, ' ').trim();

    /*Capitalize*/
    if(current_value.length > 0)current_value = current_value.split(" ").map(word => word[0].toUpperCase()+word.slice(1).toLowerCase());

    if(current_value.length > 0)
    {
      $("#word_input_button").removeClass("word_input_button_disabled");
      $("#word_input_button").addClass("word_input_button_enabled");
      if(asking_for_validation)
      {
        word_input_validate();
      }
    }
    else
    {
      $("#word_input_button").addClass("word_input_button_disabled");
      $("#word_input_button").removeClass("word_input_button_enabled");
    }

  };

  window.word_input_up_click = function(id)
  {
    /*First click on the arrow will decide which direction is A*/
    /*First click on the arrow will decide which direction is A*/
    if(!firstClick)
    {
      firstClick = true;
      alphabet = [alphabet[0]].concat(alphabet.slice(1).reverse());
    }

    target_slot_y[id] = target_slot_y[id] - firstClick;
    updateWordValue();
  };

  window.word_input_down_click = function(id)
  {
    if(!firstClick)firstClick = true;
    target_slot_y[id] = target_slot_y[id] + 1;
    updateWordValue();
  };

  window.word_input_validate = function()
  {
    State.variables[window.word_input_variable_name] = current_value;
    Engine.play(window.word_input_scene_name);
  };



  window.word_input_timer = setTimeout(word_input_step, updateInterval);

<</script>>


<</widget "WordInput">>
<</nobr>>
